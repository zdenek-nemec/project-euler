#!/usr/bin/env python

"""
PE029: Distinct powers
----------------------

Name: pe029.py

Author: Zdenek Nemec <zdenek.nemec@artin.cz>

Version: 0.1 (2017-10-18)

Synopsis:
    ``pe029.py``

Examples:
    ``pe029.py``

Description:
    Solution for Project Euler Problem 29
    (https://projecteuler.net/problem=29).

    Consider all integer combinations of :math:`a^b` for
    :math:`2 \leq a \leq 5` and `2 \leq b \leq 5`:

    :math:`2^2=4, 2^3=8, 2^4=16, 2^5=32`

    :math:`3^2=9, 3^3=27, 3^4=81, 3^5=343`

    :math:`4^2=16, 4^3=64, 4^4=256, 4^5=1024`

    :math:`5^2=25, 5^3=125, 5^4=625, 5^5=3125`

    If they are then placed in numerical order, with any repeats removed, we
    get the following sequence of 15 distinct terms:

    :math:`4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125`

    How many distinct terms are in the sequence generated by :math:`a^b` for
    :math:`2 \leq a \leq 100` and :math:`2 \leq b \leq 100`?
"""


import sys


LUCKY_NUMBER = 7


# Solution: Brute Force #######################################################

class LuckyNumbers():
    """
    Docstring for the class.
    """
    def __init__(self, number):
        """
        Docstring for the initialisation method.
        """
        self.__number = 0
        self.__assign(number)

    def __assign(self, number):
        """
        Docstring for a private method.
        """
        self.__number = number

    def get_lucky(self):
        """
        Docstring for a public method.
        """
        return self.__number


def solve_brute_force(number):
    """
    Docstring for a function.
    """
    lucky_numbers = LuckyNumbers(number)
    return lucky_numbers.get_lucky()


# Main ########################################################################

def main():
    """
    Docstring for the main function.
    """
    result = solve_brute_force(LUCKY_NUMBER)
    print "Solution: Brute Force"
    print "\tThe lucky number is <dramatic pause> %d!" % (result)

    return 0


if __name__ == "__main__":
    main()
