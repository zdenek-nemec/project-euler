#!/usr/bin/env python3

"""
PE012: Highly divisible triangular number
-----------------------------------------

Name: pe012.py

Author: Zdenek Nemec <zdenek.nemec@artin.cz>

Version: 3.0 (2017-11-27)

Synopsis:
    ``pe012.py``

Examples:
    ``pe012.py``

Description:
    Solution for Project Euler Problem 12
    (https://projecteuler.net/problem=12).

    The sequence of triangle numbers is generated by adding the natural
    numbers. So the 7th triangle number would be
    :math:`1 + 2 + 3 + 4 + 5 + 6 + 7 = 28`. The first ten terms would be:

.. math

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

..

    Let us list the factors of the first seven triangle numbers:

.. math::

    1&: 1

    3&: 1, 3

    6&: 1, 2, 3, 6

    10&: 1, 2, 5, 10

    15&: 1, 3, 5, 15

    21&: 1, 3, 7, 21

    28&: 1, 2, 4, 7, 14, 28

..

    We can see that 28 is the first triangle number to have over five
    divisors.

    What is the value of the first triangle number to have over five hundred
    divisors?
"""


import math
import sys


DIVISORS = 500


# Solution: Brute Force #######################################################

class Divisors():
    def __init__(self):
        self.divisors = {1:[1]}

    def append(self, num):
        if (not(num in self.divisors)):
            divisors = []
            limit = int(math.sqrt(num))
            for i in range(1, limit):
                if ((num % i) == 0):
                    if (not(i in divisors)):
                        divisors.append(i)
                    if (not((num/i) in divisors)):
                        divisors.append(num/i)
            self.divisors[num] = divisors

    def get_len(self, num):
        if (not(num in self.divisors)):
            self.append(num)
        return len(self.divisors[num])


class TriangleNumbers():
    def __init__(self, numbers=0):
        self.num_list = [1]
        self.last_iter = 1
        if (numbers != 0):
            self.append(numbers-1)

    def append(self, numbers=1):
        for i in range(0, numbers):
            self.last_iter += 1
            num = self.num_list[-1] + self.last_iter
            self.num_list.append(num)

    def get_last(self):
        return self.num_list[-1]

    def len(self):
        return len(self.num_list)


def solve_brute_force(divisors):
    """
    Generate a batch of triangle numbers, go in order from lowest to biggest
    and analyse number of divisors.
    """
    divs = Divisors()
    tn = TriangleNumbers()
    while True:
        if (divs.get_len(tn.get_last()) > DIVISORS):
            # print divs.divisors[tn.get_last()]
            return tn.get_last()
        tn.append()
    return -1


# Main ########################################################################

def main():
    result = solve_brute_force(DIVISORS)
    print("Solution: Brute Force")
    print("\tThe value of first triangle number with more than", DIVISORS, "divisors is", result)

    return 0


if __name__ == "__main__":
    main()
